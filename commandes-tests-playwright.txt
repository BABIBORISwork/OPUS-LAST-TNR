Commandes essentielles Playwright 

Tous les tests
- npx playwright test
- npm test

Rapport HTML
- Ouvrir le dernier rapport: npx playwright show-report
- Auto-ouverture: déjà activée (open: 'always' dans playwright.config.ts)

Exécuter en mode headed (debug)
- npx playwright test --headed
- npm run test:headed

Lancer 3 suites en parallèle (recherche + créations + tunnel)
- Via npm: npm run test:core:parallel
- Via npm (headed): npm run test:core:parallel:headed
- Direct: npx playwright test src/tests/recherche-client.tspec.ts src/tests/creation-client-tunnel.tspec.ts src/tests/creation-client-particulier.tspec.ts

Tests spécifiques
- Test tunnel uniquement: npx playwright test src/tests/creation-client-tunnel.tspec.ts
- Test tunnel en mode headed: npx playwright test src/tests/creation-client-tunnel.tspec.ts --headed
- Test tunnel avec workers spécifiques: npx playwright test src/tests/creation-client-tunnel.tspec.ts --workers=2

Forcer le niveau de parallélisme
- Valeur par défaut projet: 4 workers (config)
- Plus de workers (ex: 6) = exécutions plus parallèles mais plus de charge CPU/RAM et risque de flakiness si l’app/infra ne suit pas.
- Moins de workers (ex: 2) = plus stable mais plus lent.
- Commandes:
  - npx playwright test --workers=4
  - npx playwright test --workers=6
  - Exemple (3 fichiers ciblés, 6 workers): npx playwright test src/tests/recherche-client.tspec.ts src/tests/creation-client-tunnel.tspec.ts src/tests/creation-client-particulier.tspec.ts --workers=6

Tracer et diagnostics
- Trace viewer (après run): npx playwright show-report
- Génération guidée: npm run codegen

Conseils d’usage
- Par défaut: 4 workers. Ajuste avec --workers=N selon ta machine/CI.
- test.describe.configure({ mode: 'parallel' }) rend parallèles les tests DANS un même fichier: garde-le seulement si chaque test du fichier est indépendant (données isolées, pas d’effets de bord).
